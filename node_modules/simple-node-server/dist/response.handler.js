"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const annotation_inject_1 = require("./lib/annotations/annotation.inject");
const response_headers_1 = require("./lib/classes/response.headers");
const http_status_1 = require("./lib/enums/http.status");
const mime_type_1 = require("./lib/enums/mime.type");
class ResponseHandler {
    /**
     * @method preflight
     * @param response <http.ServerResponse>
     */
    preflight(response) {
        response.writeHead(http_status_1.HttpStatus.OK, this.responseHeaders.getPreflightHeader());
        response.end(JSON.stringify({ status: http_status_1.HttpStatus.OK, message: http_status_1.HttpStatus.getMessage(http_status_1.HttpStatus.OK) }, undefined, 4));
    }
    /**
     * @method redirect
     * @param response <http.ServerResponse>
     * @param nodeletResponse <NodeletResponse>
     */
    redirect(response, nodeletResponse) {
        const header = this.responseHeaders.getRedirectHeader();
        if (!nodeletResponse.body)
            nodeletResponse.body = 'redirect:/';
        header.Location = nodeletResponse.body.replace('redirect:', '');
        response.writeHead(nodeletResponse.httpStatus, this.attachHeaders(header, nodeletResponse.headers, nodeletResponse.authorization));
        response.end();
    }
    /**
     * @method respond
     * @param response <http.ServerResponse>
     * @param nodeletResponse <NodeletResponse>
     */
    /* tslint:disable */
    respond(response, nodeletResponse) {
        let headers;
        switch (nodeletResponse.produces) {
            case mime_type_1.MimeType.APPLICATION_XML:
                headers = this.responseHeaders.getXmlHeader();
                response.writeHead(nodeletResponse.httpStatus, this.attachHeaders(headers, nodeletResponse.headers, nodeletResponse.authorization));
                break;
            case mime_type_1.MimeType.APPLICATION_JSON:
                headers = this.responseHeaders.getJsonHeader();
                response.writeHead(nodeletResponse.httpStatus, this.attachHeaders(headers, nodeletResponse.headers, nodeletResponse.authorization));
                break;
            default:
                headers = this.responseHeaders.getHtmlHeader();
                response.writeHead(nodeletResponse.httpStatus, this.attachHeaders(headers, nodeletResponse.headers, nodeletResponse.authorization));
                break;
        }
        response.end(this.stringifyResponseData(nodeletResponse.body));
    }
    /**
     * @method pipe
     * @param response <http.ServerResponse>
     * @param nodeletResponse <NodeletResponse>
     */
    pipe(response, nodeletResponse) {
        const header = this.responseHeaders.getFileHeader();
        const readStream = nodeletResponse.body;
        response.writeHead(nodeletResponse.httpStatus, this.attachHeaders(header, nodeletResponse.headers, nodeletResponse.authorization));
        readStream.on('error', (err) => {
            response.end(JSON.stringify({
                error: err.toString(),
                message: 'INTERNAL SERVER ERROR',
                status: http_status_1.HttpStatus.INTERNAL_SERVER_ERROR
            }, undefined, 4));
        });
        readStream.on('open', () => {
            readStream.pipe(response);
        });
        readStream.on('end', () => {
            response.end();
        });
    }
    stringifyResponseData(data) {
        let sendData;
        if (typeof data === 'string')
            return data;
        try {
            sendData = JSON.stringify(data, undefined, 4);
        }
        catch (err) {
            sendData = JSON.stringify({ error: err.toString(),
                message: 'INTERNAL SERVER ERROR',
                status: http_status_1.HttpStatus.INTERNAL_SERVER_ERROR }, undefined, 4);
        }
        return sendData;
    }
    attachHeaders(outgoingheaders, headers, authorization) {
        if (headers)
            headers.forEach((value, key) => { outgoingheaders[key] = value; });
        if (authorization) {
            switch (authorization.type) {
                case 'header':
                    outgoingheaders['Authorization'] = `Bearer ${authorization.token}`;
                    break;
                case 'cookie':
                    outgoingheaders['Set-Cookie'] = `JWTOKEN=${authorization.token}`;
                    //outgoingheaders['Set-Cookie'] = `JWTOKEN=${authorization.token};Expires=${new Date().toISOString()};Secure;HttpOnly;`
                    break;
                default:
            }
        }
        return outgoingheaders;
    }
}
__decorate([
    annotation_inject_1.Inject,
    __metadata("design:type", response_headers_1.ResponseHeaders
    /**
     * @method preflight
     * @param response <http.ServerResponse>
     */
    )
], ResponseHandler.prototype, "responseHeaders", void 0);
exports.ResponseHandler = ResponseHandler;
