// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../http
//   ../querystring
//   ../fs

declare module 'simple-node-server' {
    export * from 'simple-node-server/lib/annotations/annotation.controller';
    export * from 'simple-node-server/lib/annotations/annotation.inject';
    export * from 'simple-node-server/lib/annotations/annotation.injectable';
    export * from 'simple-node-server/lib/annotations/annotation.requestmapping';
    export * from 'simple-node-server/lib/annotations/annotation.request.body';
    export * from 'simple-node-server/lib/annotations/annotation.request.param';
    export * from 'simple-node-server/lib/annotations/annotation.path.variable';
    export * from 'simple-node-server/lib/annotations/annotation.preauthorize';
    export * from 'simple-node-server/lib/annotations/annotation.model';
    export * from 'simple-node-server/lib/classes/mapping.auth';
    export * from 'simple-node-server/lib/classes/mapping.option';
    export * from 'simple-node-server/lib/classes/nodelet.request';
    export * from 'simple-node-server/lib/classes/nodelet.response';
    export * from 'simple-node-server/lib/classes/response.headers';
    export * from 'simple-node-server/lib/classes/user.principal';
    export { default as AuthMap } from 'simple-node-server/lib/container/default.authmap';
    export { default as Router } from 'simple-node-server/lib/container/default.router';
    export { default as Logger } from 'simple-node-server/lib/container/default.logger';
    export { default as MimeTypes } from 'simple-node-server/lib/container/default.mimetypes';
    export * from 'simple-node-server/lib/enums/http.status';
    export * from 'simple-node-server/lib/enums/http.method';
    export * from 'simple-node-server/lib/enums/mime.type';
    export * from 'simple-node-server/lib/enums/response.type';
    export * from 'simple-node-server/lib/interfaces/json.web.token';
    export * from 'simple-node-server/lib/interfaces/mapped.route';
    export * from 'simple-node-server/lib/interfaces/path.config';
    export * from 'simple-node-server/lib/interfaces/response.header';
    export * from 'simple-node-server/node.server';
    export * from 'simple-node-server/request.handler';
    export * from 'simple-node-server/request.router';
    export * from 'simple-node-server/response.handler';
}

declare module 'simple-node-server/lib/annotations/annotation.controller' {
    export function Controller(target: any): void;
}

declare module 'simple-node-server/lib/annotations/annotation.inject' {
    import 'reflect-metadata';
    export function Inject(target: any, key: string | Symbol): any;
}

declare module 'simple-node-server/lib/annotations/annotation.injectable' {
    export function Injectable(target: any): void;
}

declare module 'simple-node-server/lib/annotations/annotation.requestmapping' {
    import 'reflect-metadata';
    export function RequestMapping(option: any): any;
}

declare module 'simple-node-server/lib/annotations/annotation.request.body' {
    export function RequestBody(target: any, key: string | symbol, index: number): void;
}

declare module 'simple-node-server/lib/annotations/annotation.request.param' {
    export function RequestParam(target: any, key: string | symbol, index: number): void;
}

declare module 'simple-node-server/lib/annotations/annotation.path.variable' {
    export function PathVariable(target: any, key: string | symbol, index: number): void;
}

declare module 'simple-node-server/lib/annotations/annotation.preauthorize' {
    import 'reflect-metadata';
    export function PreAuthorize(role: string): any;
}

declare module 'simple-node-server/lib/annotations/annotation.model' {
    export function Model(target: any): void;
}

declare module 'simple-node-server/lib/classes/mapping.auth' {
    /**
        * Authorization Mapping
        * @class MappingAuth
        */
    export class MappingAuth {
            constructor(role: string, controllerName?: string, controllerMethod?: string);
            /**
                * @Getter
                * @return role string
                */
            getRole(): string;
            /**
                * @Getter
                * @return controllerName string
                */
            getControllerName(): string;
            /**
                * @Getter
                * @return controllerMethod string
                */
            getControllerMethod(): string;
    }
}

declare module 'simple-node-server/lib/classes/mapping.option' {
    import { ParameterMap } from 'simple-node-server/lib/classes/parameter.map';
    import { MimeType } from 'simple-node-server/lib/enums/mime.type';
    import { FunctionParameter } from 'simple-node-server/lib/interfaces/function.parameter';
    export class MappingOption {
        url: string;
        method: string;
        produces: MimeType;
        consumes: MimeType;
        pathVariables?: FunctionParameter[];
        requestParams?: FunctionParameter[];
        requestBodys?: FunctionParameter[];
        internal?: FunctionParameter[];
        rank?: number;
        constructor(mapping?: {
            url: string;
            requestMethod: string;
            produces?: MimeType;
            consumes?: MimeType;
            controllerName?: string;
            controllerMethod?: string;
        });
        static parseParamNames(functionString: string): string[];
        addParameterMap(parameterMap: ParameterMap): void;
        getControllerName(): string;
        setControllerName(controllerName: string): void;
        getControllerMethod(): string;
        setControllerMethod(controllerMethod: string): void;
        toString(): string;
    }
}

declare module 'simple-node-server/lib/classes/nodelet.request' {
    import { IncomingHttpHeaders } from 'http';
    import { ParsedUrlQuery } from 'querystring';
    export class NodeletRequest {
        constructor(query?: string | ParsedUrlQuery, body?: Map<string, any>, path?: string[], method?: string, headers?: IncomingHttpHeaders);
        getQuery(): string | ParsedUrlQuery;
        getBody(): Map<string, any>;
        getPath(): string[];
        getMethod(): string;
        getHeaders(): IncomingHttpHeaders;
        setContext(path: string): void;
    }
}

declare module 'simple-node-server/lib/classes/nodelet.response' {
    import { ReadStream } from 'fs';
    import { HttpStatus } from 'simple-node-server/lib/enums/http.status';
    import { MimeType } from 'simple-node-server/lib/enums/mime.type';
    import { HttpAuthorization } from 'simple-node-server/lib/interfaces/http.authorization';
    export class NodeletResponse {
        body: string | {} | ReadStream;
        produces: MimeType;
        headers: Map<string, string>;
        authorization: HttpAuthorization;
        httpStatus: HttpStatus;
        constructor(nodeletResponse?: {
            body: string | {};
            produces: MimeType;
            headers: Map<string, string>;
            authorization: HttpAuthorization;
            httpStatus: number;
        });
        isRedirect(): boolean;
        isFile(): boolean;
        getProduces(): MimeType;
        createSimple(body: any): NodeletResponse;
        createError(err: Error | string): NodeletResponse;
        createRedirect(): NodeletResponse;
        toString(): string;
    }
}

declare module 'simple-node-server/lib/classes/response.headers' {
    import { ResponseHeader } from 'simple-node-server/lib/interfaces/response.header';
    export class ResponseHeaders {
        getPreflightHeader(): ResponseHeader;
        getJsonHeader(): ResponseHeader;
        getXmlHeader(): ResponseHeader;
        getHtmlHeader(): ResponseHeader;
        getFileHeader(): ResponseHeader;
        getRedirectHeader(): ResponseHeader;
        setPreflightHeader(header: ResponseHeader): void;
        setJsontHeader(header: ResponseHeader): void;
        setHtmlHeader(header: ResponseHeader): void;
        setfileHeader(header: ResponseHeader): void;
        setRedirectHeader(header: ResponseHeader): void;
    }
}

declare module 'simple-node-server/lib/classes/user.principal' {
    export class UserPrincipal {
        username: string;
        roles: string[];
        enabled: boolean;
        expires: number;
        type: string;
        constructor(userPrincipal?: UserPrincipal);
    }
}

declare module 'simple-node-server/lib/container/default.authmap' {
    import { MappingAuth } from 'simple-node-server/lib/classes/mapping.auth';
    import { MappingOption } from 'simple-node-server/lib/classes/mapping.option';
    export default class AuthMap {
        static authorizationEnabled: boolean;
        static authorizationKey: string;
        static lockMethod(mAuth: MappingAuth): void;
        static findMapping(mOption: MappingOption): MappingAuth;
        static generateKey(): void;
    }
}

declare module 'simple-node-server/lib/container/default.router' {
    import { MappingOption } from 'simple-node-server/lib/classes/mapping.option';
    import { NodeletRequest } from 'simple-node-server/lib/classes/nodelet.request';
    export default class Router {
        static context: any[];
        static mappings: MappingOption[];
        static register(instance: any): void;
        static fetch(NAME: string): any;
        static addMapping(mapping: MappingOption): void;
        static getMapping(nodeletRequest: NodeletRequest): MappingOption;
    }
}

declare module 'simple-node-server/lib/container/default.logger' {
    export default class Logger {
        static initialize(logFilePath: string, timestampFormat?: string): void;
        static info(logable: Error | string): void;
        static warning(logable: Error | string): void;
        static error(logable: Error | string): void;
    }
}

declare module 'simple-node-server/lib/container/default.mimetypes' {
    export default class MimeTypes {
        static getMimeType(path: string): string;
    }
}

declare module 'simple-node-server/lib/enums/http.status' {
    export class HttpStatus {
        static CONTINUE: number;
        static SWITCHING_PROTOCOLS: number;
        static CHECKPOINT: number;
        static OK: number;
        static CREATED: number;
        static ACCEPTED: number;
        static NON_AUTHORITATIVE: number;
        static NO_CONTENT: number;
        static RESET_CONTENT: number;
        static PARTIAL_CONTENT: number;
        static MULTIPLE_CHOICES: number;
        static MOVED_PERMANENTLY: number;
        static FOUND: number;
        static SEE_OTHER: number;
        static NOT_MODFIED: number;
        static SWITCH_PROXY: number;
        static TEMPORARY_REDIRECT: number;
        static RESUME_IMCOMPLETE: number;
        static BAD_REQUEST: number;
        static UNAUTHORIZED: number;
        static PAYMENT_REQUIRED: number;
        static FORBIDDEN: number;
        static NOT_FOUND: number;
        static METHOD_NOT_ALLOWED: number;
        static NOT_ACCEPTABLE: number;
        static PROXY_AUHTENTICATION_REQUIRED: number;
        static REQUEST_TIMEOUT: number;
        static CONFLICT: number;
        static GONE: number;
        static LENGTH_REQUIRED: number;
        static PRECONDITION_FAILED: number;
        static REQUEST_ENTITY_TOO_LARGE: number;
        static REQUEST_URI_TOO_LONG: number;
        static UNSUPPORTED_MEDIA_TYPE: number;
        static REQUEST_RANGE_NOT_SATISFIABLE: number;
        static EXPECTATION_FAILED: number;
        static INTERNAL_SERVER_ERROR: number;
        static NOT_IMPLEMENTED: number;
        static BAD_GATEWAY: number;
        static SERVICE_UNAVAILABLE: number;
        static GATEWAY_TIMEOUT: number;
        static HTTP_VERSION_NOT_SUPPORTED: number;
        static NETWORK_AUHTENTICATION_REQUIRED: number;
        static getMessage(code: number): string;
    }
}

declare module 'simple-node-server/lib/enums/http.method' {
    export default class HttpMethod {
        static GET: string;
        static POST: string;
        static PUT: string;
        static PATCH: string;
        static DELETE: string;
        static OPTIONS: string;
        static HEAD: string;
    }
}

declare module 'simple-node-server/lib/enums/mime.type' {
    export class MimeType {
        static APPLICATION_JSON: string;
        static APPLICATION_FORM_URLENCODED: string;
        static MULTIPART_FORM_DATA: string;
        static APPLICATION_XML: string;
        static ATOM_XML: string;
        static TEXT_HTML: string;
        static TEXT_PLAIN: string;
        static TEXT_XML: string;
        static TEXT_JAVASCRIPT: string;
        static TEXT_STYLESHEET: string;
        static IMAGE_JPG: string;
        static IMAGE_PNG: string;
        static APPLICATION_PDF: string;
        static json: MimeType;
        static xml: MimeType;
        static html: MimeType;
        static txt: MimeType;
        static js: MimeType;
        static css: MimeType;
        static map: MimeType;
        static svg: MimeType;
        static jpg: MimeType;
        static jpeg: MimeType;
        static png: MimeType;
        static pdf: MimeType;
    }
}

declare module 'simple-node-server/lib/enums/response.type' {
    export class ResponseType {
        static RESPONSE: string;
        static PIPE: string;
        static REDIRECT: string;
    }
}

declare module 'simple-node-server/lib/interfaces/json.web.token' {
    /**
      * interface JsonWebToken
      */
    export interface JsonWebToken {
        header: string;
        payload: string;
        signature: string;
        type: string;
    }
}

declare module 'simple-node-server/lib/interfaces/mapped.route' {
    import { ServerResponse } from 'http';
    import { NodeletResponse } from 'simple-node-server/lib/classes/nodelet.response';
    /**
      * interface MappedRoute
      */
    export interface MappedRoute {
        outgoing: string;
        response: ServerResponse;
        nodeletResponse: NodeletResponse;
    }
}

declare module 'simple-node-server/lib/interfaces/path.config' {
    export interface PathConfig {
        viewPath: string;
        resourcePath: string;
    }
}

declare module 'simple-node-server/lib/interfaces/response.header' {
    import { OutgoingHttpHeaders } from 'http';
    export interface ResponseHeader extends OutgoingHttpHeaders {
        'Content-Type'?: string;
        'Location'?: string;
        'Authorization'?: string;
        'Access-Control-Allow-Origin'?: string;
        'Access-Control-Allow-Methods'?: string;
        'Access-Control-Allow-Headers'?: string;
    }
}

declare module 'simple-node-server/node.server' {
    import { IncomingMessage, ServerResponse } from 'http';
    import { ResponseHeaders } from 'simple-node-server/lib/classes/response.headers';
    import { PathConfig } from 'simple-node-server/lib/interfaces/path.config';
    export class NodeServer {
        responseHeaders: ResponseHeaders;
        /**
          * Preparation
          */
        registerController(controllerPath: string): void;
        setResourcePath(resourcePath?: string): void;
        setViewPath(viewPath?: string): void;
        setAuthorization(enabled: boolean, key?: string): string;
        constructor(config?: PathConfig);
        serve(request: IncomingMessage, response: ServerResponse): Promise<void>;
    }
}

declare module 'simple-node-server/request.handler' {
    import * as http from 'http';
    import { NodeletRequest } from 'simple-node-server/lib/classes/nodelet.request';
    export class RequestHandler {
        getNodeletRequest(request: http.IncomingMessage): Promise<NodeletRequest>;
    }
}

declare module 'simple-node-server/request.router' {
    import { ServerResponse } from 'http';
    import { NodeletRequest } from 'simple-node-server/lib/classes/nodelet.request';
    import { MappedRoute } from 'simple-node-server/lib/interfaces/mapped.route';
    export class RequestRouter {
            getKey(): string;
            /**
                * route url to annotated/mapped controller-method
                * @method route
                * @param nodeletRequest
                * @param response
                * @return Promise<MappedRoute>
                */
            route(nodeletRequest: NodeletRequest, response: ServerResponse): Promise<MappedRoute>;
    }
}

declare module 'simple-node-server/response.handler' {
    import { ServerResponse } from 'http';
    import { NodeletResponse } from 'simple-node-server/lib/classes/nodelet.response';
    export class ResponseHandler {
            /**
                * @method preflight
                * @param response <http.ServerResponse>
                */
            preflight(response: ServerResponse): void;
            /**
                * @method redirect
                * @param response <http.ServerResponse>
                * @param nodeletResponse <NodeletResponse>
                */
            redirect(response: ServerResponse, nodeletResponse: NodeletResponse): void;
            /**
                * @method respond
                * @param response <http.ServerResponse>
                * @param nodeletResponse <NodeletResponse>
                */
            respond(response: ServerResponse, nodeletResponse: NodeletResponse): void;
            /**
                * @method pipe
                * @param response <http.ServerResponse>
                * @param nodeletResponse <NodeletResponse>
                */
            pipe(response: ServerResponse, nodeletResponse: NodeletResponse): void;
    }
}

declare module 'simple-node-server/lib/classes/parameter.map' {
    import { FunctionParameter } from 'simple-node-server/lib/interfaces/function.parameter';
    export class ParameterMap {
        controllerName: string;
        controllerMethod: string;
        pathVariables?: FunctionParameter[];
        requestParams?: FunctionParameter[];
        requestBodys?: FunctionParameter[];
        internal?: FunctionParameter[];
        constructor(controllerName: string, controllerMethod: string);
    }
}

declare module 'simple-node-server/lib/interfaces/function.parameter' {
    export interface FunctionParameter {
        index: number;
        name: string;
        type: string;
    }
}

declare module 'simple-node-server/lib/interfaces/http.authorization' {
    export interface HttpAuthorization {
        type: string;
        token: string;
    }
}

