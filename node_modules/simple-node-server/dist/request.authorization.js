"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsonwebtoken_1 = require("jsonwebtoken");
const annotation_injectable_1 = require("./lib/annotations/annotation.injectable");
const nodelet_response_1 = require("./lib/classes/nodelet.response");
const http_status_1 = require("./lib/enums/http.status");
const mime_type_1 = require("./lib/enums/mime.type");
const jwt_parser_1 = require("./lib/internal/jwt.parser");
const default_authmap_1 = require("./lib/container/default.authmap");
let RequestAuthorization = class RequestAuthorization {
    constructor() {
        this.jwtParser = new jwt_parser_1.JwtParser();
        this.renewTime = 1800000000;
    }
    /**
     * @Getter authorize
     */
    authorize(nodeletResquest, mapping) {
        const mappingAuth = default_authmap_1.default.findMapping(mapping);
        const validMap = {
            code: 200,
            nodeletResponse: undefined,
            token: undefined,
            tokentype: undefined,
            userPrincipal: undefined,
            valid: false
        };
        validMap.userPrincipal = this.jwtParser.extractUserPrincipalFromToken(nodeletResquest);
        validMap.token = this.renewToken(validMap.userPrincipal);
        if (mappingAuth && !validMap.token)
            validMap.code = http_status_1.HttpStatus.UNAUTHORIZED;
        validMap.valid = mappingAuth ? this.verifyRequest(mappingAuth, validMap.userPrincipal, validMap.token) : true;
        if (mappingAuth && validMap.token && !validMap.valid)
            validMap.code = http_status_1.HttpStatus.FORBIDDEN;
        validMap.nodeletResponse = validMap.valid ? undefined : this.createRedirectNodeletResponse(mapping);
        return validMap;
    }
    /**
     * verify json web token
     * @param jsonWebToken
     * @param role
     */
    verifyRequest(mAuth, userPrincipal, token) {
        if (!mAuth)
            return true;
        if (!userPrincipal)
            return false;
        if (!userPrincipal.roles)
            return false;
        if (!userPrincipal.expires)
            return false;
        if (Math.ceil(userPrincipal.expires) < Math.ceil(Date.now()))
            return false;
        return (userPrincipal.roles.some((uRole) => uRole === mAuth.getRole()));
    }
    createRedirectNodeletResponse(mapping) {
        switch (mapping.produces) {
            case mime_type_1.MimeType.APPLICATION_JSON:
                return new nodelet_response_1.NodeletResponse({
                    authorization: undefined,
                    body: this.jwtParser.jwtError || { message: 'login required' },
                    headers: undefined,
                    httpStatus: http_status_1.HttpStatus.FORBIDDEN,
                    produces: mime_type_1.MimeType.APPLICATION_JSON
                });
            case mime_type_1.MimeType.TEXT_HTML:
                return new nodelet_response_1.NodeletResponse({
                    authorization: undefined,
                    body: 'redirect:/login',
                    headers: undefined,
                    httpStatus: http_status_1.HttpStatus.FOUND,
                    produces: mime_type_1.MimeType.TEXT_HTML
                });
            default:
                return new nodelet_response_1.NodeletResponse({
                    authorization: undefined,
                    body: 'redirect:/login',
                    headers: undefined,
                    httpStatus: http_status_1.HttpStatus.FOUND,
                    produces: mime_type_1.MimeType.TEXT_HTML
                });
        }
    }
    /**
     * renew token timestamp
     * @param jsonWebToken
     */
    renewToken(userPrincipal) {
        if (!userPrincipal)
            return undefined;
        userPrincipal.expires = Math.ceil(new Date().getTime() + this.renewTime);
        return jsonwebtoken_1.sign(userPrincipal, default_authmap_1.default.authorizationKey);
    }
};
RequestAuthorization = __decorate([
    annotation_injectable_1.Injectable
], RequestAuthorization);
exports.RequestAuthorization = RequestAuthorization;
