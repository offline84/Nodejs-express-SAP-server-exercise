"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const nodelet_response_1 = require("../classes/nodelet.response");
const http_status_1 = require("../enums/http.status");
const default_mimetypes_1 = require("../container/default.mimetypes");
/**
 * handle file requests
 * @class FilePipe
 */
class FilePipe {
    constructor(resourcePath, viewPath) {
        this.resourcePath = resourcePath;
        this.viewPath = viewPath;
    }
    name() {
        return this.constructor.name;
    }
    /**
     * create readstream from file
     * @param nodeletRequest
     * @return Promise<ReadStream> file
     */
    createReadStreamFromRequest(nodeletRequest) {
        const nodeletResponse = new nodelet_response_1.NodeletResponse();
        let readStream;
        const path = this.determinePath(nodeletRequest.getPath().join('/'));
        try {
            if (path) {
                readStream = fs_1.createReadStream(path);
            }
            if (readStream) {
                nodeletResponse.body = readStream;
                nodeletResponse.headers.set('Content-Type', default_mimetypes_1.default.getMimeType(readStream.path.toString()));
                // nodeletResponse.produces = MimeType.TEXT_PLAIN
                return Promise.resolve(nodeletResponse);
            }
            else {
                nodeletResponse.body = '';
                nodeletResponse.httpStatus = http_status_1.HttpStatus.NOT_FOUND;
                return Promise.resolve(nodeletResponse);
            }
        }
        catch (err) {
            return Promise.reject(err.toString());
        }
    }
    determinePath(requestPath) {
        const inResourcePath = path_1.resolve(this.resourcePath, requestPath);
        if (fs_1.existsSync(inResourcePath))
            return inResourcePath;
        const inViewsPath = path_1.resolve(this.viewPath, requestPath);
        if (fs_1.existsSync(inViewsPath))
            return inViewsPath;
        const inPath = path_1.resolve(requestPath);
        if (fs_1.existsSync(inPath))
            return inPath;
        return undefined;
    }
    /**
     * @Getter
     * @return resourcePath string
     */
    getResourcePath() {
        return this.resourcePath;
    }
}
exports.FilePipe = FilePipe;
