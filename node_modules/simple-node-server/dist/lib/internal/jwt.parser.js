"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jwtUtil = require("jsonwebtoken");
const cookie_parser_1 = require("./cookie.parser");
const default_authmap_1 = require("../container/default.authmap");
class JwtParser {
    extractUserPrincipalFromToken(nodeletRequest) {
        let jsonWebToken;
        let jsonWebTokenDecoded;
        jsonWebToken = this.extractJsonWebToken(nodeletRequest.getHeaders());
        if (!jsonWebToken)
            return undefined;
        jsonWebTokenDecoded = this.handleJsonWebToken(jsonWebToken);
        if (!jsonWebTokenDecoded)
            return undefined;
        return this.createUserPrincipal(jsonWebTokenDecoded);
    }
    /**
     * extract json web token from header or cookie
     * @param headers
     */
    extractJsonWebToken(headers) {
        let token;
        token = this.extractFromHeader(headers);
        if (!token)
            token = this.extractFromCookie(headers);
        return token;
    }
    /**
     * try extract token from header
     * @param headers
     */
    extractFromHeader(headers) {
        const authorization = headers['authorization'];
        if (!authorization)
            return undefined;
        return `header:${authorization.replace('Bearer ', '')}`;
    }
    extractFromCookie(headers) {
        const cookies = headers['cookie'];
        if (!cookies)
            return undefined;
        const tokenString = Array.isArray(cookies) ? cookies.find((cookie) => cookie.startsWith('JWTOKEN')) : cookies;
        this.cookieParser = new cookie_parser_1.CookieParser(tokenString);
        const token = this.cookieParser.getParsedCookie();
        if (token) {
            return `cookie:${token.value}`;
        }
        return undefined;
    }
    /**
     * handle json web token
     */
    handleJsonWebToken(jsonWebToken) {
        let jsonWebTokenDecoded;
        try {
            jwtUtil.verify(jsonWebToken.split(':')[1], default_authmap_1.default.authorizationKey);
            jsonWebTokenDecoded = jwtUtil.decode(jsonWebToken.split(':')[1], { complete: true });
        }
        catch (e) {
            this.jwtError = e;
            return undefined;
        }
        if (jsonWebTokenDecoded)
            jsonWebTokenDecoded.type = jsonWebToken.split(':')[0];
        return jsonWebTokenDecoded;
    }
    /**
     * create userPrincipal
     * @param jsonWebTokenDecoded
     */
    createUserPrincipal(jsonWebTokenDecoded) {
        return {
            enabled: true,
            expires: new Date().getTime(),
            roles: jsonWebTokenDecoded.payload['roles'],
            type: jsonWebTokenDecoded.type,
            username: jsonWebTokenDecoded.payload['username']
        };
    }
}
exports.JwtParser = JwtParser;
