"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http_status_1 = require("../enums/http.status");
const mime_type_1 = require("../enums/mime.type");
const default_logger_1 = require("../container/default.logger");
class NodeletResponse {
    constructor(nodeletResponse) {
        this.body = nodeletResponse && nodeletResponse.body || '';
        this.produces = nodeletResponse && nodeletResponse.produces || mime_type_1.MimeType.TEXT_HTML;
        this.headers = nodeletResponse && nodeletResponse.headers || new Map();
        this.authorization = nodeletResponse && nodeletResponse.authorization || undefined;
        this.httpStatus = nodeletResponse && nodeletResponse.httpStatus || http_status_1.HttpStatus.OK;
    }
    isRedirect() {
        const sbody = this.body;
        return this.body !== undefined && typeof this.body === 'string' && sbody.startsWith('redirect:');
    }
    isFile() {
        try {
            const stream = this.body;
            return stream.readable;
        }
        catch (e) {
            default_logger_1.default.error(e);
            return false;
        }
    }
    getProduces() {
        if (this.produces)
            return this.produces;
        return typeof this.body === 'object' ? mime_type_1.MimeType.APPLICATION_JSON : mime_type_1.MimeType.TEXT_HTML;
    }
    createSimple(body) {
        this.authorization = undefined;
        this.body = body;
        this.headers = new Map();
        this.httpStatus = http_status_1.HttpStatus.OK;
        this.produces = mime_type_1.MimeType.TEXT_HTML;
        return this;
    }
    createError(err) {
        this.authorization = undefined;
        this.body = typeof err === 'string' ? err : err.toString();
        this.headers = new Map();
        this.httpStatus = http_status_1.HttpStatus.INTERNAL_SERVER_ERROR;
        this.produces = mime_type_1.MimeType.TEXT_HTML;
        return this;
    }
    createRedirect() {
        this.authorization = undefined;
        this.body = 'redirect:/';
        this.headers = new Map();
        this.httpStatus = http_status_1.HttpStatus.FOUND;
        this.produces = mime_type_1.MimeType.TEXT_HTML;
        return this;
    }
    toString() {
        return JSON.stringify(this, undefined, 4);
    }
}
exports.NodeletResponse = NodeletResponse;
