"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const annotation_injectable_1 = require("../annotations/annotation.injectable");
let ResponseHeaders = class ResponseHeaders {
    constructor() {
        this.preflightHeader = {
            'Access-Control-Allow-Headers': 'Content-Type',
            'Access-Control-Allow-Methods': 'OPTIONS,GET,POST,PUT,PATCH,DELETE',
            'Access-Control-Allow-Origin': '*',
            'Content-Type': 'application/json;charset=utf-8'
        };
        this.jsonHeader = {
            'Access-Control-Allow-Headers': 'Content-Type',
            'Access-Control-Allow-Methods': 'OPTIONS,GET,POST,PUT,PATCH,DELETE',
            'Access-Control-Allow-Origin': '*',
            'Content-Type': 'application/json;charset=utf-8'
        };
        this.xmlHeader = {
            'Access-Control-Allow-Headers': 'Content-Type',
            'Access-Control-Allow-Methods': 'GET',
            'Access-Control-Allow-Origin': '*',
            'Content-Type': 'application/xml;charset=utf-8'
        };
        this.htmlHeader = {
            'Content-Type': 'text/html'
        };
        this.fileHeader = {
            'Content-Type': 'text/plain'
        };
        this.redirectHeader = { Location: '/404.html' };
    }
    getPreflightHeader() {
        return this.preflightHeader;
    }
    getJsonHeader() {
        return this.jsonHeader;
    }
    getXmlHeader() {
        return this.xmlHeader;
    }
    getHtmlHeader() {
        return this.htmlHeader;
    }
    getFileHeader() {
        return this.fileHeader;
    }
    getRedirectHeader() {
        return this.redirectHeader;
    }
    setPreflightHeader(header) {
        this.preflightHeader = header;
    }
    setJsontHeader(header) {
        this.jsonHeader = header;
    }
    setHtmlHeader(header) {
        this.htmlHeader = header;
    }
    setfileHeader(header) {
        this.fileHeader = header;
    }
    setRedirectHeader(header) {
        this.redirectHeader = header;
    }
};
ResponseHeaders = __decorate([
    annotation_injectable_1.Injectable
], ResponseHeaders);
exports.ResponseHeaders = ResponseHeaders;
