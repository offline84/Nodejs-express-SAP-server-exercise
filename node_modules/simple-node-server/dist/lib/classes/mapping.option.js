"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mime_type_1 = require("../enums/mime.type");
class MappingOption {
    constructor(mapping) {
        this.url = mapping && mapping.url || '/';
        this.method = mapping && mapping.requestMethod || '';
        this.produces = mapping && mapping.produces || mime_type_1.MimeType.TEXT_HTML;
        this.consumes = mapping && mapping.consumes || mime_type_1.MimeType.APPLICATION_FORM_URLENCODED;
        this.controllerName = mapping && mapping.controllerName || undefined;
        this.controllerMethod = mapping && mapping.controllerMethod || undefined;
    }
    static parseParamNames(functionString) {
        return functionString.split(/\(|\)/)[1].split(', ');
    }
    addParameterMap(parameterMap) {
        this.requestParams = parameterMap.requestParams;
        this.pathVariables = parameterMap.pathVariables;
        this.requestBodys = parameterMap.requestBodys;
        this.internal = parameterMap.internal;
    }
    getControllerName() {
        return this.controllerName;
    }
    setControllerName(controllerName) {
        this.controllerName = controllerName;
    }
    getControllerMethod() {
        return this.controllerMethod;
    }
    setControllerMethod(controllerMethod) {
        this.controllerMethod = controllerMethod;
    }
    toString() {
        const from = `${this.method}:${this.url}`;
        const to = `${this.controllerName}.${this.controllerMethod}()`;
        const space = 35 - this.method.length - this.url.length;
        if (space < 0) {
            return `mapped ${from.substring(0, 32)}...| to ${to}`;
        }
        else {
            return `mapped ${from}${new Array(space).join(' ')}| to ${to}`;
        }
    }
}
exports.MappingOption = MappingOption;
