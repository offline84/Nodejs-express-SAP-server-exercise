"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const nodelet_request_1 = require("./lib/classes/nodelet.request");
const default_logger_1 = require("./lib/container/default.logger");
class RequestHandler {
    getNodeletRequest(request) {
        return new Promise((resolve, reject) => {
            const requestUrl = url.parse(request.url, true);
            request.on('error', (err) => {
                default_logger_1.default.error({ name: err.name, message: err.message, stack: err.stack });
                reject(err.toString());
            });
            let buffer = '';
            request.on('data', (data) => {
                buffer += data;
            });
            request.on('end', () => {
                resolve(new nodelet_request_1.NodeletRequest(requestUrl.query, this.parseBody(buffer, request.headers['content-type']), this.parsePath(requestUrl.pathname), request.method, request.headers));
            });
        });
    }
    parseBody(body, contenttype) {
        if (!body)
            return undefined;
        if (contenttype) {
            if (contenttype.includes('application/json'))
                return this.parseJson(body);
            if (contenttype.includes('application/x-www-form-urlencoded'))
                return this.parseFormUrlEncoded(body);
            return undefined;
        }
        let content;
        content = this.parseJson(body);
        if (content)
            return content;
        return this.parseFormUrlEncoded(body);
    }
    parseFormUrlEncoded(body) {
        try {
            const splitted = decodeURIComponent(body).split('&');
            const parsedBody = new Map();
            splitted.forEach((pair) => {
                if (pair.split('=')[0].split('.').length > 1) {
                    if (!parsedBody[pair.split('=')[0].split('.')[0]])
                        parsedBody[pair.split('=')[0].split('.')[0]] = {};
                    parsedBody[pair.split('=')[0].split('.')[0]][pair.split('=')[0].split('.')[1]] = pair.split('=')[1];
                }
                else {
                    parsedBody[pair.split('=')[0]] = pair.split('=')[1];
                }
            });
            return parsedBody;
        }
        catch (err) {
            default_logger_1.default.error({ name: err.name, message: err.message, stack: err.stack });
            return undefined;
        }
    }
    parseJson(body) {
        try {
            return JSON.parse(body);
        }
        catch (err) {
            default_logger_1.default.error({ name: err.name, message: err.message, stack: err.stack });
            return undefined;
        }
    }
    parsePath(path) {
        try {
            return path.split('/').filter((value) => value !== '');
        }
        catch (err) {
            default_logger_1.default.error({ name: err.name, message: err.message, stack: err.stack });
            return undefined;
        }
    }
}
exports.RequestHandler = RequestHandler;
