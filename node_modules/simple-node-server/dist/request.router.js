"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_authorization_1 = require("./request.authorization");
const response_resolver_1 = require("./response.resolver");
const annotation_inject_1 = require("./lib/annotations/annotation.inject");
const mapping_option_1 = require("./lib/classes/mapping.option");
const nodelet_response_1 = require("./lib/classes/nodelet.response");
const http_status_1 = require("./lib/enums/http.status");
const default_authmap_1 = require("./lib/container/default.authmap");
const default_parameter_injector_1 = require("./lib/container/default.parameter.injector");
const default_router_1 = require("./lib/container/default.router");
class RequestRouter {
    constructor() {
        this.responseResolver = new response_resolver_1.ResponseResolver();
    }
    getKey() {
        return this.requestAuthorization.key;
    }
    /**
     * route url to annotated/mapped controller-method
     * @method route
     * @param nodeletRequest
     * @param response
     * @return Promise<MappedRoute>
     */
    async route(nodeletRequest, response) {
        const mapping = this.fetchMapping(nodeletRequest);
        const controller = this.fetchController(mapping);
        const nodeletResponse = this.buildNodeletResponse('', mapping);
        let userPrincipal;
        if (!controller)
            return this.responseResolver.resolveRedirect(response, new nodelet_response_1.NodeletResponse().createRedirect());
        if (default_authmap_1.default.authorizationEnabled) {
            const validMap = this.requestAuthorization.authorize(nodeletRequest, mapping);
            if (validMap.code) {
                nodeletResponse.httpStatus = validMap.code;
                switch (validMap.code) {
                    case http_status_1.HttpStatus.UNAUTHORIZED:
                        nodeletResponse.body = 'redirect:/error/401';
                        break;
                    case http_status_1.HttpStatus.FORBIDDEN:
                        nodeletResponse.body = 'redirect:/error/403';
                        break;
                    default:
                        break;
                }
            }
            if (validMap.userPrincipal)
                userPrincipal = validMap.userPrincipal;
            switch (validMap.tokentype) {
                case 'cookie':
                    response.setHeader('Set-Cookie', `JWTOKEN=${validMap.token}`);
                    break;
                case 'header':
                    response.setHeader('Authorization', `Bearer ${validMap.token}`);
                    break;
                default: break;
            }
        }
        const parameter = default_parameter_injector_1.default.inject(mapping, nodeletRequest, nodeletResponse, userPrincipal);
        if (mapping.getControllerName() === 'FilePipe')
            parameter.push(nodeletRequest);
        return this.executeControllerMethod(response, nodeletResponse, controller, mapping, parameter);
    }
    async executeControllerMethod(response, initialNodeletResponse, controller, mapping, parameter) {
        const controllerOutput = await controller[mapping.getControllerMethod()].apply(controller, parameter);
        const nodeletResponse = controllerOutput instanceof nodelet_response_1.NodeletResponse ? controllerOutput : initialNodeletResponse;
        if (!nodeletResponse.body)
            nodeletResponse.body = controllerOutput;
        if (mapping.produces)
            nodeletResponse.produces = mapping.produces;
        if (nodeletResponse.isFile())
            return this.responseResolver.resolveFilePipe(response, nodeletResponse);
        else if (nodeletResponse.isRedirect())
            return this.responseResolver.resolveRedirect(response, nodeletResponse);
        else if (nodeletResponse)
            return this.responseResolver.resolveResponse(response, nodeletResponse);
        throw new Error('no route ERROR');
    }
    buildNodeletResponse(body, mapping) {
        const response = new nodelet_response_1.NodeletResponse();
        response.createSimple(body);
        if (!mapping)
            return response;
        if (mapping.produces)
            response.headers['Content-Type'] = mapping.produces;
        return response;
    }
    /**
     * @method fetchMapping
     * @param nodeletRequest <NodeletRequest>
     * @return mapping <MappingOptions>
     */
    fetchMapping(nodeletRequest) {
        if ((/\w\.[a-zA-Z0-9]{2,}/).test(nodeletRequest.getPath().join('/')))
            return new mapping_option_1.MappingOption({ url: 'resources', requestMethod: 'GET', controllerName: 'FilePipe', controllerMethod: 'createReadStreamFromRequest' });
        const mapping = default_router_1.default.getMapping(nodeletRequest);
        if (mapping)
            return mapping;
        return undefined;
    }
    /**
     * @method fetchController
     * @param mapping <MappingOption>
     * @return ControllerClass <any>
     */
    fetchController(mapping) {
        if (!mapping)
            return undefined;
        return default_router_1.default.fetch(mapping.getControllerName());
    }
}
__decorate([
    annotation_inject_1.Inject,
    __metadata("design:type", request_authorization_1.RequestAuthorization)
], RequestRouter.prototype, "requestAuthorization", void 0);
exports.RequestRouter = RequestRouter;
