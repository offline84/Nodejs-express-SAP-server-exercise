import 'reflect-metadata';
import { MappingOption } from '../classes/mapping.option';
import { NodeletRequest } from '../classes/nodelet.request';
import { NodeletResponse } from '../classes/nodelet.response';
import { ParameterMap } from '../classes/parameter.map';
import { UserPrincipal } from '../classes/user.principal';
import { ParameterType } from '../enums/parameter.type';
import { InjectionType } from '../interfaces/injection.type';
export default class ParameterInjector {
    private static types;
    private static parameters;
    static getParameter(controllerName: string, controllerMethod: string): ParameterMap;
    static setType(type: InjectionType): void;
    static setParamsToDestination(target: any, key: string | symbol, index: number, destination: ParameterType): void;
    static inject(options: MappingOption, nodeletRequest: NodeletRequest, nodeletResponse: NodeletResponse, userPrincipal: UserPrincipal): any[];
    private static addInternal(requestedParams, nodeletRequest, nodeletResponse, userPrincipal);
    private static parseRequested(requestedParams, params);
    private static parsePath(requestedParams, paths, mappedPath);
    private static getNumber(params, key);
    private static getString(params, key);
    private static getBoolean(params, key);
    private static getArray(params, key);
    private static getObject(params, key, type);
}
